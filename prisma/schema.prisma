// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             Int       @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String    @unique
  password       String?
  phone          String?
  company        String?
  website        String?
  bio            String?
  profilePicture String?   @default("")
  googleId       String?   @unique
  facebookId     String?   @unique
  twitterId      String?   @unique
  role           Role      @default(BUSINESS)
  active         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  ownedProducts  Product[]       @relation("UserProducts")
  promotions     Promotion[]     @relation("UserPromotions")
  socialAccounts SocialMediaAccount[] @relation("UserSocialAccounts")
  productViews   ProductView[]   @relation("UserProductViews")
  promotionClicks PromotionClick[] @relation("UserPromotionClicks")
  earnings       Earnings[]      @relation("UserEarnings")
}

// Product model
model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  category    String?
  active      Boolean   @default(true)
  ownerId     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner       User        @relation("UserProducts", fields: [ownerId], references: [id], onDelete: Cascade)
  promotions  Promotion[] @relation("ProductPromotions")
  views       ProductView[] @relation("ProductViews")
}

// Promotion model
model Promotion {
  id             Int       @id @default(autoincrement())
  name           String
  description    String?
  productId      Int
  promoterId     Int
  commissionType String    @default("percentage") // percentage or fixed
  commissionRate Float
  startDate      DateTime?
  endDate        DateTime?
  active         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  product        Product   @relation("ProductPromotions", fields: [productId], references: [id], onDelete: Cascade)
  promoter       User      @relation("UserPromotions", fields: [promoterId], references: [id], onDelete: Cascade)
  clicks         PromotionClick[] @relation("PromotionClicks")
  earnings       Earnings[] @relation("PromotionEarnings")
  socialMediaPosts SocialMediaPost[] @relation("PromotionPosts")
}

// Social Media Post model
model SocialMediaPost {
  id           Int       @id @default(autoincrement())
  promotionId  Int
  accountId    Int
  postId       String    @unique // ID from the social platform
  platform     String
  content      String?
  mediaUrl     String?
  postUrl      String?
  postDate     DateTime
  status       String    @default("published") // draft, published, deleted
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  promotion    Promotion @relation("PromotionPosts", fields: [promotionId], references: [id], onDelete: Cascade)
  account      SocialMediaAccount @relation("AccountPosts", fields: [accountId], references: [id], onDelete: Cascade)
}

// Social Media Account model
model SocialMediaAccount {
  id            Int       @id @default(autoincrement())
  userId        Int
  platform      String
  username      String
  accessToken   String?
  refreshToken  String?
  tokenExpiry   DateTime?
  profileUrl    String?
  connected     Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation("UserSocialAccounts", fields: [userId], references: [id], onDelete: Cascade)
  posts         SocialMediaPost[] @relation("AccountPosts")
}

// Product View model
model ProductView {
  id        Int       @id @default(autoincrement())
  productId Int
  userId    Int?
  ipAddress String?
  userAgent String?
  referrer  String?
  viewDate  DateTime  @default(now())

  // Relations
  product   Product   @relation("ProductViews", fields: [productId], references: [id], onDelete: Cascade)
  user      User?     @relation("UserProductViews", fields: [userId], references: [id], onDelete: SetNull)
}

// Promotion Click model
model PromotionClick {
  id          Int       @id @default(autoincrement())
  promotionId Int
  userId      Int?
  ipAddress   String?
  userAgent   String?
  referrer    String?
  clickDate   DateTime  @default(now())

  // Relations
  promotion   Promotion @relation("PromotionClicks", fields: [promotionId], references: [id], onDelete: Cascade)
  user        User?     @relation("UserPromotionClicks", fields: [userId], references: [id], onDelete: SetNull)
}

// Earnings model
model Earnings {
  id          Int       @id @default(autoincrement())
  userId      Int
  promotionId Int
  amount      Float
  type        String    @default("commission")
  status      String    @default("pending") // pending, paid, cancelled
  description String?
  paymentDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation("UserEarnings", fields: [userId], references: [id], onDelete: Cascade)
  promotion   Promotion @relation("PromotionEarnings", fields: [promotionId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  BUSINESS
  PROMOTER
}
